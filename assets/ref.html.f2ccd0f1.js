import{_ as n,o as s,c as a,b as t}from"./app.a6f56f7f.js";const p={},e=t(`<h1 id="\u54CD\u5E94\u5F0F-ref" tabindex="-1"><a class="header-anchor" href="#\u54CD\u5E94\u5F0F-ref" aria-hidden="true">#</a> \u54CD\u5E94\u5F0F - ref</h1><blockquote><p><code>ref</code> \u63A5\u6536\u4E00\u4E2A\u53EF\u9009\u7684 <code>value</code> \u505A\u4E3A\u5165\u53C2\uFF0C\u63A5\u7740\u76F4\u63A5\u8C03\u7528 <code>createRef</code></p><p><code>createRef</code> \u5148\u5224\u65AD <code>value</code> \u662F\u5426\u5DF2\u7ECF\u662F\u4E00\u4E2A <code>ref</code>, \u5982\u679C\u662F\u5219\u76F4\u63A5\u8FD4\u56DE\uFF0C\u5982\u679C\u4E0D\u662F\u63A5\u7740\u5224\u65AD\u662F\u4E0D\u662F\u6D45\u89C2\u5BDF\uFF0C\u5982\u679C\u662F\u6D45\u89C2\u5BDF\u76F4\u63A5\u6784\u9020\u4E00\u4E2A <code>ref</code> \u8FD4\u56DE\uFF0C\u4E0D\u662F\u5219\u5C06 <code>rawValue</code> \u8F6C\u6362\u6210 <code>reactive</code> \u518D\u6784\u9020\u4E00\u4E2A <code>ref</code> \u8FD4\u56DE</p><p>\u8BFB\u53D6 <code>ref</code> \u7684\u503C\u65F6\uFF0C\u89E6\u53D1 <code>get</code> \u65B9\u6CD5\uFF0C\u8FDB\u884C\u4F9D\u8D56\u6536\u96C6\uFF1B\u8BBE\u7F6E <code>ref</code> \u7684\u503C\u65F6\uFF0C\u89E6\u53D1 <code>set</code> \u65B9\u6CD5\uFF0C\u89E6\u53D1\u4F9D\u8D56\u7684\u51FD\u6570</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Jest</span>
<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;\u4F5C\u4E3A\u503C&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u521B\u5EFA\u4E00\u4E2A\u54CD\u5E94\u5F0F\u7684\u503C</span>
  <span class="token keyword">let</span> dummy<span class="token punctuation">;</span>
  <span class="token keyword">let</span> calls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6536\u96C6\u4F9D\u8D56</span>
  <span class="token comment">// \u6B64\u65F6\u4F1A\u81EA\u52A8\u8FD0\u884C\u4E00\u904D\u5F53\u524D\u51FD\u6570\uFF0C\u8FD0\u884C\u5F53\u524D\u51FD\u6570 fn \u9047\u5230 a \u65F6\u4F1A\u89E6\u53D1 a \u7684 get \u65B9\u6CD5\uFF0C\u5E76\u5C06\u5F53\u524D\u4F9D\u8D56\u6536\u96C6\u5230 ref \u7684 dep \u4E2D</span>
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// fn</span>
    calls<span class="token operator">++</span><span class="token punctuation">;</span>
    dummy <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u2705</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u2705</span>
  <span class="token comment">// \u6539\u53D8 a \u7684\u503C\u65F6\uFF0C\u4F1A\u89E6\u53D1 a \u7684 set \u65B9\u6CD5\uFF0C\u5E76\u53BB\u6267\u884C\u4F9D\u8D56 dep \u4E2D\u7684\u51FD\u6570 fn</span>
  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 1 + 1 = 2</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u2705</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u2705</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&quot;\u4F5C\u4E3A\u5BF9\u8C61&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> dummy<span class="token punctuation">;</span>
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    dummy <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u2705</span>
  a<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 1 + 1 = 2</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u2705</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),c=[e];function o(u,l){return s(),a("div",null,c)}var k=n(p,[["render",o],["__file","ref.html.vue"]]);export{k as default};
